Metadata-Version: 2.4
Name: pypage
Version: 3.0.0
Summary: Enhanced HTML Generator Library with advanced features
Home-page: https://github.com/pypage/pypage
Author: PyPage Development Team
Author-email: PyPage Development Team <dev@pypage.org>
Maintainer-email: PyPage Development Team <dev@pypage.org>
License: MIT
Project-URL: Homepage, https://github.com/pypage/pypage
Project-URL: Documentation, https://docs.pypage.org
Project-URL: Repository, https://github.com/pypage/pypage
Project-URL: Bug Tracker, https://github.com/pypage/pypage/issues
Project-URL: Changelog, https://github.com/pypage/pypage/blob/main/CHANGELOG.md
Keywords: html,generator,web,framework,bootstrap,css,javascript,components,ui,responsive,dark-mode,animations,charts,forms
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Text Processing :: Markup :: HTML
Classifier: Topic :: Software Development :: Code Generators
Classifier: Framework :: Flask
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: flask>=2.0.0
Requires-Dist: flask-sqlalchemy>=3.0.0
Requires-Dist: sqlalchemy>=2.0.0
Requires-Dist: jinja2>=3.0.0
Requires-Dist: markupsafe>=2.0.0
Requires-Dist: build>=1.2.2.post1
Requires-Dist: twine>=6.1.0
Requires-Dist: setuptools>=75.3.2
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=5.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Provides-Extra: pdf
Requires-Dist: weasyprint>=60.0; extra == "pdf"
Requires-Dist: reportlab>=4.0.0; extra == "pdf"
Provides-Extra: charts
Requires-Dist: plotly>=5.0.0; extra == "charts"
Requires-Dist: matplotlib>=3.5.0; extra == "charts"
Provides-Extra: full
Requires-Dist: weasyprint>=60.0; extra == "full"
Requires-Dist: reportlab>=4.0.0; extra == "full"
Requires-Dist: plotly>=5.0.0; extra == "full"
Requires-Dist: matplotlib>=3.5.0; extra == "full"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# 🚀 PyPage - Enhanced HTML Generator Library

<div align="center">

![PyPage Logo](docs/images/logo.svg)

**Create stunning, responsive web pages with Python**

[![PyPI version](https://badge.fury.io/py/pypage.svg)](https://badge.fury.io/py/pypage)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
<!-- [![Downloads](https://pepy.tech/badge/pypage)](https://pepy.tech/project/pypage) -->
[![Documentation](https://img.shields.io/badge/docs-latest-brightgreen.svg)](docs/)

</div>

PyPage is a comprehensive Python library that revolutionizes HTML generation with advanced features including **dark mode**, **animations**, **responsive design**, and **modern UI components**. Build professional websites programmatically with an intuitive, object-oriented approach.

<div align="center">

![Powerful Features](docs/images/features.png)
*🎯 Everything you need to create modern webpages programmatically*

</div>

<div align="center">

![Quick Documentation](docs/images/documentation.png)
*📚 Complete component reference with easy-to-use syntax*

</div>

<div align="center">

![Hero Banner](docs/images/hero-banner.svg)

</div>

## ✨ Why Choose PyPage?

<table>
<tr>
<td width="50%">

### 🎨 **Modern & Beautiful**
- **Bootstrap 5 Integration** - Professional styling out of the box
- **Dark Mode Support** - Automatic system preference detection
- **Custom Themes** - Material, Tailwind, Bulma support
- **Responsive Design** - Mobile-first approach

</td>
<td width="50%">

### ⚡ **Fast & Powerful**
- **Component-Based** - Reusable, modular architecture
- **Type-Safe** - Full type hints for better development
- **Performance Optimized** - WebAssembly integration
- **Hot Reload** - Development server with live updates

</td>
</tr>
<tr>
<td>

### 🛠️ **Developer Friendly**
- **Intuitive API** - Pythonic, object-oriented design
- **Rich Documentation** - Complete guides and examples
- **CLI Tools** - Project scaffolding and templates
- **Flask Integration** - Seamless web framework support

</td>
<td>

### 🚀 **Production Ready**
- **Export Options** - PDF, JSON, static HTML
- **SEO Optimized** - Built-in meta tags and structure
- **Accessibility** - WCAG compliance tools
- **Plugin System** - Extensible architecture

</td>
</tr>
</table>

## 📦 Installation

```bash
# Basic installation
pip install pypage

# With PDF export support
pip install pypage[pdf]

# With chart support
pip install pypage[charts]

# Full installation with all features
pip install pypage[full]
```

## 🎯 Quick Start

```python
from pypage import *

# Create a new page
page = Page("My Website", "Welcome to PyPage!")

# Add content
page.add_content(Heading("Hello, World!", 1))
page.add_content(Paragraph("Build amazing websites with Python."))

# Add a styled card
card = Card([
    Heading("Getting Started", 3),
    Paragraph("PyPage makes HTML generation simple and powerful."),
    Button("Learn More", "button", css_class="btn-primary")
])
page.add_content(card)

# Generate HTML
html = page.generate_html()
print(html)
```

## 🌟 Advanced Features

### Dark Mode Support
```python
page = Page("Dark Mode Demo", "Theme Switching")
page.add_content(DarkModeToggle(position="top-right"))
page.add_content(Heading("Dark Mode Ready!", 1))
```

### Animations
```python
# Fade in animation
animated_content = FadeIn(
    Container([
        Heading("Smooth Animations", 2),
        Paragraph("Content that fades in beautifully.")
    ])
)
page.add_content(animated_content)
```

### Responsive Layout
```python
row = Row()
row.add_column(Column([
    Heading("Left Column", 3),
    Paragraph("Responsive content here.")
], width="md-6"))
row.add_column(Column([
    Heading("Right Column", 3), 
    Paragraph("More responsive content.")
], width="md-6"))
page.add_content(row)
```

### Data Visualization
```python
# Create a chart
chart_data = {
    "labels": ["Jan", "Feb", "Mar", "Apr"],
    "datasets": [{
        "label": "Sales",
        "data": [10, 19, 3, 5]
    }]
}
chart = BarChart("sales-chart", chart_data)
page.add_content(chart)
```

## 🛠️ CLI Tools

PyPage includes command-line tools for project generation:

```bash
# Create a new project
pypage create myproject

# Create a Flask project
pypage create myapp --template flask

# Generate documentation
pypage docs
```

## 📚 Component Library

PyPage includes a comprehensive set of components:

### Core Components
- `Page` - Main page container with theme support
- `Container`, `Div`, `Section` - Layout containers  
- `Heading`, `Paragraph` - Typography elements
- `Image`, `Link` - Media and navigation
- `Card` - Content cards with styling

### Form Components
- `Form` - Form container with validation
- `Input` - Text, email, password, and other input types
- `TextArea` - Multi-line text input
- `Select` - Dropdown with single/multiple selection
- `Button` - Submit and action buttons

### Layout System
- `Row`, `Column` - Responsive grid system
- `Flex` - Flexbox layouts
- `Navbar` - Navigation with dropdown support

### Advanced Components
- `Modal`, `Alert`, `Badge` - Interactive elements
- `Table`, `Tabs`, `Carousel` - Data display
- `ProgressBar`, `Accordion` - UI components
- `Chart`, `KPICard` - Data visualization

## 🎨 Styling and Themes

PyPage uses Bootstrap 5 by default with a custom dark theme:

```python
# Set theme
page.set_theme('bootstrap')  # or 'material', 'tailwind'

# Custom CSS
css_builder = CSSBuilder()
css_builder.add_rule('.custom', {
    'background': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    'color': 'white'
})
page.custom_css = css_builder.render()
```

## 🧪 Testing

The library includes a comprehensive testing application:

```bash
cd testing
python app.py
```

Visit `http://localhost:5001` to run interactive tests and see component demonstrations.

## 📖 Documentation & Resources

<div align="center">

| 📘 **Core Documentation** | 🎯 **Guides & Tutorials** | 🛠️ **Development** |
|:---------------------------|:---------------------------|:--------------------|
| [**🚀 Quick Start**](docs/quick-start.md)<br/>*Get up and running in 5 minutes* | [**🎨 Theme Customization**](docs/themes.md)<br/>*Create beautiful custom themes* | [**🔧 API Reference**](docs/api-reference.md)<br/>*Complete component documentation* |
| [**📦 Installation Guide**](docs/installation.md)<br/>*Multiple installation options* | [**📱 Responsive Design**](docs/responsive.md)<br/>*Mobile-first development* | [**🧪 Testing Guide**](docs/testing.md)<br/>*Test your components* |
| [**🏗️ Architecture**](docs/architecture.md)<br/>*Understanding PyPage structure* | [**🌙 Dark Mode Setup**](docs/dark-mode.md)<br/>*Implement dark mode support* | [**🔌 Plugin Development**](docs/plugins.md)<br/>*Create custom components* |

</div>

### 📊 Visual Guides

<div align="center">

![Architecture Overview](docs/images/architecture.svg)
**Component Architecture** - *Complete system organization*

![Development Workflow](docs/images/workflow.svg)
**Development Workflow** - *From installation to deployment*

</div>

### 🎓 Learning Resources

<div align="center">

![Theme Showcase](docs/images/theme-showcase.svg)
**Theme System** - *Beautiful, customizable themes for every project*

</div>

- **[📚 Component Gallery](docs/components/)** - Visual showcase of all components
- **[💡 Examples Library](docs/examples/)** - Real-world usage examples  
- **[🎮 Interactive Playground](test/)** - Live testing environment
- **[📺 Video Tutorials](docs/tutorials/)** - Step-by-step video guides
- **[❓ FAQ](docs/faq.md)** - Common questions and solutions
- **[🎨 Theme Gallery](docs/themes.md)** - Beautiful theme customization examples

## 🤝 Contributing

We love contributions from the community! PyPage is built by developers, for developers.

### 🚀 Ways to Contribute

<table>
<tr>
<td width="33%">

**🐛 Bug Reports**
- Found an issue? Report it!
- Include reproduction steps
- Provide system details
- Help make PyPage better

</td>
<td width="33%">

**💡 Feature Requests**
- Suggest new components
- Propose improvements
- Share your ideas
- Shape PyPage's future

</td>
<td width="33%">

**📝 Documentation**
- Improve guides
- Add examples
- Fix typos
- Help others learn

</td>
</tr>
<tr>
<td>

**🔧 Code Contributions**
- Fix bugs
- Add features
- Optimize performance
- Write tests

</td>
<td>

**🎨 Themes & Examples**
- Create beautiful themes
- Share real-world examples
- Build showcase projects
- Inspire others

</td>
<td>

**💬 Community Support**
- Answer questions
- Help newcomers
- Share knowledge
- Build community

</td>
</tr>
</table>

### 📋 Quick Start for Contributors

```bash
# 1. Fork and clone the repository
git clone https://github.com/yourusername/pypage.git
cd pypage

# 2. Install development dependencies  
pip install -e .[dev]

# 3. Make your changes
# Edit code, add tests, update docs

# 4. Run tests and checks
pytest                    # Run test suite
black .                   # Format code
flake8 .                  # Check style
mypy src/pypage/          # Type checking

# 5. Submit your pull request
git commit -m "Add amazing feature"
git push origin feature-branch
```

### 🎯 Contribution Guidelines

- **Follow the code style** - We use Black and follow PEP 8
- **Add tests** - New features should include tests
- **Update documentation** - Keep docs current with changes
- **Be respectful** - Follow our code of conduct
- **Start small** - Begin with minor improvements or bug fixes

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🌟 Acknowledgments

- Bootstrap team for the excellent CSS framework
- Flask community for web framework inspiration
- All contributors who have helped improve PyPage

---

**PyPage** - Making HTML generation simple, powerful, and beautiful.
