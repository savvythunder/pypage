# html_generator/page.py

class Page:
    def __init__(self, title, header_text, logo_url=None, nav_links=None, header_class=None):
        self.title = title
        self.header_text = header_text
        self.logo_url = logo_url
        self.nav_links = nav_links if nav_links is not None else []
        self.header_class = header_class
        self.body_content = []

    def add_navbar(self, nav_links: list):
        """Add a navigation bar to the page"""
        self.nav_links.extend(nav_links)

    def add_content(self, content: str):
        """Add content to the body of the page"""
        self.body_content.append(content)

    def render_header(self):
        """Render the header section of the page"""
        logo_html = f'<img src="{self.logo_url}" alt="Logo" class="logo">' if self.logo_url else ""
        header_class_attr = f' class="{self.header_class}"' if self.header_class else ""
        header_html = f"""
        <header{header_class_attr}>
            {logo_html}
            <h1>{self.header_text}</h1>
            {self.render_navbar()}
        </header>
        """
        return header_html

    def render_navbar(self):
        """Render the navigation bar"""
        if not self.nav_links:
            return ""
        nav_items = "".join(f'<li><a href="{link}">{link}</a></li>' for link in self.nav_links)
        return f"<nav><ul>{nav_items}</ul></nav>"

    def generate_html(self):
        """Generate the complete HTML for the page"""
        body = "\n".join(self.body_content)
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{self.title}</title>
    <style>
        body {{ font-family: Arial, sans-serif; }}
        header {{ background: #f8f8f8; padding: 20px; text-align: center; }}
        nav ul {{ list-style-type: none; padding: 0; }}
        nav ul li {{ display: inline; margin: 0 10px; }}
    </style>
</head>
<body>
    {self.render_header()}
    <main>
        {body}
    </main>
</body>
</html>"""
        return html

    def save_to_file(self, filename):
        """Save the generated HTML to a file"""
        with open(filename, 'w') as file:
            file.write(self.generate_html())

class Heading:
    def __init__(self, text, level=1):
        self.text = text
        self.level = level

    def render(self):
        """Render the heading as HTML"""
        if 1 <= self.level <= 6:
            return f"<h{self.level}>{self.text}</h{self.level}>"
        else:
            raise ValueError("Heading level must be between 1 and 6.")

